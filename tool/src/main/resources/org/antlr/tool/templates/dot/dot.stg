/*
 * [The "BSD license"]
 * Copyright (c) 2011 Terence Parr
 * All rights reserved.
 *
 * Conversion to C#:
 * Copyright (c) 2011 Sam Harwell, Tunnel Vision Laboratories, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

containerGraph(name, subgraphs) ::= <<
digraph <name> {
  <subgraphs; separator="\n">
}
>>

dfa(decisionRanks,states,edges,rankdir,startState,useBox,graphType,graphName,graphLabel) ::= <<
<graphType>graph <if(graphName)><graphName><else>DFA<endif> {
  <if(graphLabel)>
  label="<graphLabel>";
  <endif>
  <if(rankdir)>rankdir=<rankdir>;<endif>
  <states; separator="\n">
  <decisionRanks; separator="\n">
  <edges; separator="\n">
}
>>

nfa(decisionRanks,states,edges,rankdir,startState,graphType,graphName,graphLabel) ::= <<
<graphType>graph <if(graphName)><graphName><else>NFA<endif> {
  <if(graphLabel)>
  label="<graphLabel>";
  <endif>
  rankdir=LR;
  <states; separator="\n">
  <decisionRanks; separator="\n">
  <edges; separator="\n">
}
>>

decision_rank(states,prefix) ::= <<
{rank=same; rankdir=TB; <states:{s | "<prefix><s>"}; separator="; ">}
>>

edge(src,target,label,arrowhead,prefix) ::= <<
"<prefix><src>" -> "<prefix><target>" [fontsize=11, fontname="Courier", arrowsize=.7, label = "<label>"<if(arrowhead)>, arrowhead = <arrowhead><endif>];
>>

action_edge(src,target,label,arrowhead,prefix) ::= <<
"<prefix><src>" -> "<prefix><target>" [fontsize=11, fontname="Courier", arrowsize=.7, label = "<label>"<if(arrowhead)>, arrowhead = <arrowhead><endif>];
>>

epsilon_edge(src,target,label,arrowhead,prefix) ::= <<
"<prefix><src>" -> "<prefix><target>" [fontname="Times-Italic", label = "e"];
>>

state(name,useBox,prefix) ::= <<
node [fontsize=11, shape = <if(useBox)>box, fixedsize=false<else>circle, fixedsize=true, width=.4<endif>, label="<name>"]; "<prefix><name>"
>>

stopstate(name,useBox,prefix) ::= <<
node [fontsize=11, shape = <if(useBox)>polygon,sides=4,peripheries=2<else>doublecircle, fixedsize=true, width=.6<endif>, label="<name>"]; "<prefix><name>"
>>
